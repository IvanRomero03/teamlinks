generator client {
  provider             = "prisma-client-js"
  recursive_type_depth = "5"
  interface            = "asyncio"
}

datasource db {
  provider     = "sqlserver"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  candidato     Candidato?
  reclutador    Reclutador?
  admin         Admin?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Candidato {
  id            String       @id
  tecPrincipal  String
  tecSecundaria String
  pais          String
  experiencia   Int
  Ranking       Int
  user          User         @relation(fields: [id], references: [id])
  aplicacion    Aplicacion[]

  @@index([id])
}

model Reclutador {
  id             String        @id
  country        String
  tecPrincipal   String
  tecSecundaria  String
  departamentoId String?
  adminId        String
  user           User          @relation(fields: [id], references: [id])
  aplicacion     Aplicacion[]
  proyecto       Proyecto[]
  Departamento   Departamento? @relation(fields: [departamentoId], references: [id])

  @@index([adminId])
  @@index([departamentoId])
  @@index([id])
}

model Departamento {
  id         String       @id @default(cuid())
  nombre     String
  proyecto   Proyecto[]
  Admin      Admin[]
  Reclutador Reclutador[]
}

model Admin {
  id             String        @id
  departamentoId String?
  user           User          @relation(fields: [id], references: [id])
  proyecto       Proyecto[]
  Departamento   Departamento? @relation(fields: [departamentoId], references: [id])

  @@index([departamentoId])
  @@index([id])
}

model Aplicacion {
  id            String     @id @default(cuid())
  nombre        String
  fechaCreacion DateTime   @default(now())
  candidatoId   String
  reclutadorId  String
  estatus       String
  fechaEstatus  DateTime
  puestosId     String?
  candidato     Candidato  @relation(fields: [candidatoId], references: [id])
  reclutador    Reclutador @relation(fields: [reclutadorId], references: [id])

  @@index([candidatoId])
  @@index([puestosId])
  @@index([reclutadorId])
}

model MustHaves {
  id        String   @id @default(cuid())
  name      String
  puestosId String?
  Puestos   Puestos? @relation(fields: [puestosId], references: [id])

  @@index([puestosId])
}

model Puestos {
  id                       String      @id
  jobTitle                 String
  descripcion              String      @db.Text
  tipo                     String
  employee                 Boolean
  contractor               Boolean
  Genus                    String
  hireCategory             String
  estatus                  String?
  fechaCreacion            DateTime    @default(now())
  fechaEstatusChange       DateTime    @updatedAt
  numPosiciones            Int
  numPosicionesDisponibles Int
  proyectoId               String
  departamentoId           String?
  mustHaves                MustHaves[]
  proyecto                 Proyecto    @relation(fields: [proyectoId], references: [id])

  @@index([departamentoId])
  @@index([proyectoId])
}

model Proyecto {
  id                 String        @id @default(cuid())
  nombre             String
  descripcion        String        @db.Text
  pais               String
  type               String
  estatus            String?
  fechaCreacion      DateTime      @default(now())
  fechaEstatusChange DateTime      @updatedAt
  adminId            String
  numPosicionesTot   Int
  numPosicionesDis   Int
  departamentoId     String?
  admin              Admin         @relation(fields: [adminId], references: [id])
  reclutador         Reclutador    @relation(fields: [reclutadorId], references: [id])
  puesto             Puestos[]
  Departamento       Departamento? @relation(fields: [departamentoId], references: [id])
  Requirement        Requirement[]

  @@index([adminId])
  @@index([departamentoId])
}

model Requirement {
  id         String    @id @default(cuid())
  name       String
  proyectoId String?
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])

  @@index([proyectoId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  adminId   String

  @@index([adminId])
}

model CandiadateTechStack {
  id          String  @id
  name        String
  candidatoId String?

  @@index([candidatoId])
}

model CandidateExpirience {
  id          String   @id
  name        String
  date        DateTime
  description String
  position    String
  employer    String
  candidatoId String?

  @@index([candidatoId])
}

model ReclutadorProyectos {
  id           String @id
  reclutadorId String
  proyectoId   String

  @@index([proyectoId])
  @@index([reclutadorId])
}
